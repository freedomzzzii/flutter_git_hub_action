default_platform(:ios)

fastlane_require 'dotenv'

before_all do
  Dotenv.overload '../../.env'
end

platform:ios do
    # branch: all branch
    desc "Test ios in Firebase test lab"
    lane:test_lab do
          match(
            type: 'appstore',
            app_identifier: ENV["APP_BUNDLE_ID"],
            generate_apple_certs: false,
#             readonly: true
#             username: ENV["MATCH_USERNAME"]
          )

        Dir.chdir("../") do
            sh("pod install")
        end

        sh("flutter build ios --config-only integration_test/main_integration_test.dart")
        sh("flutter build ios integration_test/main_integration_test.dart --release --no-codesign")
        xcodebuild(
            workspace: "Runner.xcworkspace",
            configuration: "../Flutter/Release.xcconfig",
            scheme: "Runner",
            derivedDataPath: "../build/ios_integ",
            xcargs: "-sdk iphoneos build-for-testing",
        )
    end

    # run this lane before deploy to firebase app distribute
    desc "Build file for deploy firebase app distribute"
    lane:build_file_for_app_distribution do

    Dir.chdir("../") do
        sh("pod install")
    end

#      match_nuke(
#         type: 'appstore',
#         git_url: "https://github.com/freedomzzzii/flutter_git_hub_action.git",
#         skip_confirmation: true,
#         username: ENV["MATCH_USERNAME"],
#         app_identifier: ENV["APP_BUNDLE_ID"],
# #                 readonly: is_ci,
#         verbose: true,
#         generate_apple_certs: false,
# #                 storage_mode: "git",
#         include_all_certificates: true
#     )
#       match(
#         type: 'appstore',
#         git_url: "https://github.com/freedomzzzii/flutter_git_hub_action.git",
#         skip_confirmation: true,
#         username: ENV["MATCH_USERNAME"],
#         app_identifier: ENV["APP_BUNDLE_ID"],
#         verbose: true,
# #         readonly: true,
#         generate_apple_certs: false,
# #         storage_mode: "git",
# #         include_all_certificates: true
#       )

       if is_ci
         sh("security list-keychains")
         sh('security create-keychain -p "hugeman123" ~/Library/Keychains/cicd.keychain-db')
         sh('security unlock-keychain -p "hugeman123" ~/Library/Keychains/cicd.keychain-db')
         sh('security list-keychains -d user -s ~/Library/Keychains/cicd.keychain-db $(security list-keychains -d user | sed s/\"//g)')
         sh("security list-keychains")
         sh("security list-keychains -d user")
         sh('security import ../distribution.p12 -P "hugeman123" -A -t cert -f pkcs12 -k ~/Library/Keychains/cicd.keychain-db')
         sh("security import ../distribution.cer ~/Library/Keychains/cicd.keychain-db")
         sh('mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles')
         sh('cp ../Distribute_comhugemanflutterstarterkit.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles')
       else
         create_keychain(
            name: "cicd.keychain-db",
            unlock: true,
            timeout: 0,
            password: ENV["KEYCHAIN_PASSWORD"],
          )
          import_certificate(
              certificate_path: "distribution.cer",
              keychain_name: "cicd.keychain-db",
              keychain_password: ENV["KEYCHAIN_PASSWORD"]
          )
       end


        sh('cd ~/Library/MobileDevice/Provisioning\ Profiles && ls')
#         install_provisioning_profile(path: "Distribute_comhugemanflutterstarterkit.mobileprovision")

#         sh('cp ../Distribute_comhugemanflutterstarterkit.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles')
#         update_project_provisioning(
#           xcodeproj: "Runner.xcodeproj",
#           build_configuration: "Release",
#           profile: "Distribute_comhugemanflutterstarterkit.mobileprovision",
#           certificate: "distribution.cer",
#           code_signing_identity: "Apple Distribution"
#         )
        update_code_signing_settings(
          path: "Runner.xcodeproj",
          targets: "Runner",
          profile_name: "Distribute com.hugeman.flutterstarterkit",
          bundle_identifier: ENV["APP_BUNDLE_ID"],
          use_automatic_signing: false,
          team_id: ENV["APPLE_TEAM_ID"],
          code_sign_identity:  "Apple Distribution",
         )

        build_app(
          workspace: "Runner.xcworkspace",
          scheme: "Runner",
          configuration: "Release",
          clean: true,
#           xcargs: "-allowProvisioningUpdates -authenticationKeyPath=app_store_connect_key.p8 -authenticationKeyID=#{ENV["APP_STORE_CONNECT_AUTH_KEY_ID"]} -authenticationKeyIssuerID=#{ENV["APP_STORE_CONNECT_AUTH_ISSUER_ID"]}",
          export_method: "app-store",
#           skip_codesigning: true,
          export_team_id: ENV["APPLE_TEAM_ID"],
          export_options: {
                provisioningProfiles: {
                    ENV["APP_BUNDLE_ID"] => "Apple Distribution: HUGEMAN CONSULTANT COMPANY LIMITED (F5TTGBJ3W4)",
                }
            },
            codesigning_identity: "Apple Distribution",
            installer_cert_name: "Apple Distribution: HUGEMAN CONSULTANT COMPANY LIMITED (F5TTGBJ3W4)"
        )

    end

    # branches: feature, develop, bugfix, hotfix, release
    desc "Deploy a release version to the Firebase App Distribute for Developer testing"
    lane:app_distribution_group_developer do
        firebase_app_distribution(
            app: ENV["FASTLANE_FIREBASE_APP_DISTRIBUTE_ID_IOS"],
            groups: "developer",
      )
    end

    # branches: feature, develop, bugfix, hotfix, release, master(pre-prod)[tag]
    desc "Deploy a release version to the Firebase App Distribute for QA testing"
    lane:app_distribution_group_qa do
        firebase_app_distribution(
            app: ENV["FASTLANE_FIREBASE_APP_DISTRIBUTE_ID_IOS"],
            groups: "qa",
      )
    end

     # branch: release
    desc "Deploy a release version to the Firebase App Distribute for User testing"
    lane:app_distribution_group_user do
        firebase_app_distribution(
            app: ENV["FASTLANE_FIREBASE_APP_DISTRIBUTE_ID_IOS"],
            groups: "user",
        )
    end

    # tag: master
    desc "Deploy a release version to the App store"
    lane:release do
        cert
        sigh(force: true)

#          puts ENV["MATCH_PASSWORD"]
#         puts ENV["FASTLANE_SESSION"]
#
#           match(
#             type: 'appstore',
#             app_identifier: ENV["APP_BUNDLE_ID"],
#             generate_apple_certs: false,
#           )

        build_app(
            workspace: "Runner.xcworkspace",
            scheme: "Runner",
            configuration: "release",
            xcargs: "-allowProvisioningUpdates",
            export_method: "ad-hoc",
            export_options: {
                provisioningProfiles: {
                    ENV["APP_BUNDLE_ID"] => ENV["APPLE_PROVISIONING_PROFILE_ADHOC"],
                }
            }
        )
        upload_to_app_store
    end
end
