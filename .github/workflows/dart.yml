name: Project workflow

on:
  pull_request:
    branches:
      - 'develop'
      - 'release/**'
      - 'main'

env:
  ECR_REPOSITORY: flutter-starter-kit-template

jobs:
  test:
    name: Run test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup java version 12.x
        uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - name: Setup flutter version stable
        uses: subosito/flutter-action@v1
        with:
          channel: 'stable'
      - name: Install dependencies
        run: make project/install/package
      - name: Generate l10n
        run: make l10n/generate
      - name: Generate mock file for test
        run: make test/generate/mock-file
      - name: Create file env
        run: |
          cat << EOF >> .env
          API_URL=${{ secrets.API_URL_DEV }}
          EOF
      - name: Test (Unit test & Widjet test)
        run: make test/run
      - name: Coverage
        uses: VeryGoodOpenSource/very_good_coverage@v1.2.0
        with:
          path: './coverage/lcov.info'
          min_coverage: 80

  analyze:
    name: Run analyze
    needs: [ test ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup java version 12.x
        uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - name: Setup flutter version stable
        uses: subosito/flutter-action@v1
        with:
          channel: 'stable'
      - name: Install dependencies
        run: make project/install/package
      - name: Generate l10n
        run: make l10n/generate
      - name: Generate mock file for test
        run: make test/generate/mock-file
      - name: Create file env
        run: |
          cat << EOF >> .env
          API_URL=${{ secrets.API_URL_DEV }}
          EOF
      - name: Analyze project source
        run: make analysis/run

  update_version:
    name: Update code version for build
    needs: [ test, analyze ]
    runs-on: ubuntu-latest
    steps:
      - name: Generate build number
        uses: einaregilsson/build-number@v3
        with:
          token: ${{secrets.github_token}}
      - name: Print new build number and run number
        run: echo "Build number is $BUILD_NUMBER, $GITHUB_RUN_NUMBER"
      - name: Increate version code
        run: perl -i -pe 's/^(version:\s+\d+\.\d+\.\d+\+)(\d+)$/$1.('$GITHUB_RUN_NUMBER')/e' pubspec.yaml

  test_lab_android:
    name: Run test Android on firebase test lab
    needs: [ test, analyze, update_version ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup java version 12.x
        uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - name: Setup flutter version stable
        uses: subosito/flutter-action@v1
        with:
          channel: 'stable'
      - name: Install dependencies
        run: make project/install/package
      - name: Create file env
        run: |
          cat << EOF >> .env
          API_URL=${{ secrets.API_URL_DEV }}
          EOF
      - name: Generate l10n
        run: make l10n/generate
      - name: Build file .apk
        run: make android/build/apk
      - name: Upload apk
        uses: actions/upload-artifact@v2
        with:
          name: apk-build
          path: build/app/outputs/apk/release
      - uses: gradle/gradle-build-action@v1
        with:
          gradle-version: 6.7
          build-root-directory: ./android/gradlew
          gradle-executable: ./android/gradlew
          arguments: wrapper
      - name: Generate mock file for test
        run: make test/generate/mock-file
      - name: Build assembleAndroidTest
        run: make android/build/test
      - name: Build assembleDebug
        run: make android/build/test-debug
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
      - name: Run test on firebase test lab
        run: gcloud firebase test android run --type instrumentation --app build/app/outputs/apk/debug/app-debug.apk --test build/app/outputs/apk/androidTest/debug/app-debug-androidTest.apk --device model=Pixel2,version=28,locale=pl,orientation=portrait
        ###############
        #TODO: firebase test lab&app distribute iOS
        #  test_lab_ios:
        #    name: Run test iOS on firebase test lab
        #    #    needs: [ test, analyze, update_version ]
        #    runs-on: macos-latest
        #    steps:
        #      - name: Checkout
        #        uses: actions/checkout@v2
        #      - name: Setup java version 12.x
        #        uses: actions/setup-java@v1
        #        with:
        #          java-version: '12.x'
        #      - name: Setup flutter version stable
        #        uses: subosito/flutter-action@v1
        #        with:
        #          channel: 'stable'
        #      - name: Install dependencies
        #        run: make project/install/package
        #      - name: Create file env
        #        run: |
        #          cat << EOF >> .env
        #          API_URL=${{ secrets.API_URL_DEV }}
        #          EOF
        #      - name: Generate l10n
        #        run: make l10n/generate
        #      - name: Set config integration test
        #        run: make ios/config/test-lab
        #      - name: Build release test
        #        run: make ios/build/test
        #      - name: Build Runner test
        #        run: make ios/build/runner-test
        #      - name: Zip file
        #        run: make ios/zip/test-lab
        #      - name: Set up Cloud SDK
        #        uses: google-github-actions/setup-gcloud@master
        #        with:
        #          project_id: ${{ secrets.GCP_PROJECT_ID }}
        #          service_account_key: ${{ secrets.GCP_SA_KEY }}
        #      - name: Run test on firebase test lab
        #        run: gcloud firebase test ios run --type=xctest --test=build/ios_integ/Build/Products/ios_tests.zip --device=model=iphone8,version=14.7,locale=en,orientation=portrait --xcode-version=13.0

        # TODO:
        #  build_ios:
        #    name: Build Flutter (iOS)
        #    needs: [ test, analyze, update_version ]
        #    runs-on: macos-latest
        #    outputs:
        #      message: ${{ steps.message.outputs.test }}
        #    steps:
        #      - name: Set output
        #      id: message
        #      run: echo "::set-output name=test::Build file .ipa is"
        #    - name: Checkout
        #      uses: actions/checkout@v2
        #    - name: Setup java version 12.x
        #      uses: actions/setup-java@v1
        #      with:
        #        java-version: '12.x'
        #    - name: Setup flutter version stable
        #      uses: subosito/flutter-action@v1
        #      with:
        #        channel: 'stable'
        #    - name: Install dependencies
        #      run: make project/install/package
        #    - name: Create file env
        #      run: |
        #        cat << EOF >> .env
        #        API_URL=${{ secrets.API_URL_DEV }}
        #        EOF
        #    - name: Generate l10n
        #      run: make l10n/generate
        #    - name: Build file .ipa
        #      run: make build/ipa
        # TODO: upload output file
  #      - name: Upload ipa
  #        uses: actions/upload-artifact@v2
  #        with:
  #          name: appbundle-build
  #          path: build/app/outputs/bundle/release

  ############
  build_appbundle:
    name: Build Flutter (Android - Appbundle)
    needs: [ test, analyze, update_version ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup java version 12.x
        uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - name: Setup flutter version stable
        uses: subosito/flutter-action@v1
        with:
          channel: 'stable'
      - name: Install dependencies
        run: make project/install/package
      - name: Create file env
        run: |
          cat << EOF >> .env
          API_URL=${{ secrets.API_URL_DEV }}
          EOF
      - name: Generate l10n
        run: make l10n/generate
      - name: Build file .aab
        run: make android/build/appbundle
      - name: Upload appbundle
        uses: actions/upload-artifact@v2
        with:
          name: appbundle-build
          path: build/app/outputs/bundle/release

  build_web:
    name: Build Flutter (Web)
    needs: [ test, analyze, update_version ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup java version 12.x
        uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - name: Setup flutter version stable
        uses: subosito/flutter-action@v1
        with:
          channel: 'stable'
      - name: Install dependencies
        run: make project/install/package
      - name: Create file env
        run: |
          cat << EOF >> .env
          API_URL=${{ secrets.API_URL_DEV }}
          EOF
      - name: Generate l10n
        run: make l10n/generate
      - name: Build web
        run: make web/build
      - uses: actions/cache@v2
        id: build-web
        with:
          path: ./build/web
          key: build-web

  build_docker_image:
    name: Build image to aws
    needs: [ test, analyze, update_version, build_web ]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - uses: actions/cache@v2
        id: build-web
        with:
          path: ./build/web
          key: build-web
      - name: Build the stack
        run: docker build -t flutter-starter-kit-template:latest .
      - name: Save docker image
        run: docker save --output flutter-starter-kit-template.bak.tar  flutter-starter-kit-template
      - uses: actions/cache@v2
        id: docker-image-cache
        with:
          path: ./flutter-starter-kit-template.bak.tar
          key: docker-image-cache

  scan_docker_image:
    name: scan docker image
    needs: [ test, analyze, update_version, build_web, build_docker_image ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v2
        id: docker-image-cache
        with:
          path: ./flutter-starter-kit-template.bak.tar
          key: docker-image-cache
      - name: Load docker image
        run: docker load --input flutter-starter-kit-template.bak.tar
      - name: Install Docker Scan
        run: |
          mkdir -p ~/.docker/cli-plugins && \
          curl https://github.com/docker/scan-cli-plugin/releases/latest/download/docker-scan_linux_amd64 -L -s -S -o ~/.docker/cli-plugins/docker-scan &&\
          chmod +x ~/.docker/cli-plugins/docker-scan
      - name: Login Docker scan
        run: docker scan --login --token ${{ secrets.SNYK_TOKEN }} --accept-license
      - name: Scan docker image
        run: docker scan flutter-starter-kit-template:latest --accept-license

  push_docker_image_to_ecr:
    name: Push docker image to ECR
    needs: [ test, analyze, update_version, build_web, build_docker_image, scan_docker_image ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - uses: actions/cache@v2
        id: docker-image-cache
        with:
          path: ./flutter-starter-kit-template.bak.tar
          key: docker-image-cache
      - name: load docker image
        run: docker load --input flutter-starter-kit-template.bak.tar
      - name: Create tag and push docker image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  distribute_app:
    name: Upload file .apk, .aab, .ipa to Firebase App Distribution
    # TDOO: need build_ios
    #    needs: [ test_lab_android, build_appbundle, build_ios ]
    needs: [ test_lab_android, build_appbundle ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup java version 12.x
        uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: appbundle-build
      - name: Upload appbundle
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{secrets.FIREBASE_ANDROID_APPID}}
          token: ${{secrets.FIREBASE_TOKEN}}
          groups: developer
          file: app-release.apk
      - name: Upload apk
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{secrets.FIREBASE_ANDROID_APPID}}
          token: ${{secrets.FIREBASE_TOKEN}}
          groups: developer
          file: app-release.apk
      # TODO: upload file .ipa

  notify_slack_success:
    runs-on: ubuntu-latest
    needs: [ test, analyze, build_appbundle, test_lab_android, build_web, distribute_app, test_lab_android, build_web, build_docker_image, scan_docker_image, push_docker_image_to_ecr ]
    if: success()
    steps:
      - name: Notify test result
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: '#90be6d'
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: Job is success

  notify_slack_failure:
    runs-on: ubuntu-latest
    needs: [ test, analyze, build_appbundle, test_lab_android, build_web, distribute_app, test_lab_android, build_web, build_docker_image, scan_docker_image, push_docker_image_to_ecr ]
    if: failure()
    steps:
      - name: Notify test result
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: '#f94144'
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: Job is failure